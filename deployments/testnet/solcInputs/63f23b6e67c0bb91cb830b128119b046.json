{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/IPrismaDividendTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IPrismaDividendTracker {\n  /**\n   * @notice Sets the address for the token used for dividend payout\n   * @dev This should be an ERC20 token\n   */\n  function setDividendTokenAddress(address newToken) external;\n\n  /**\n   * @notice Updates the minimum balance required to be eligible for dividends\n   */\n  function updateMinimumTokenBalanceForDividends(\n    uint256 _newMinimumBalance\n  ) external;\n\n  /**\n   * @notice Makes an address ineligible for dividends\n   * @dev Calls `_setBalance` and updates `tokenHoldersMap` iterable mapping\n   */\n  function excludeFromDividends(address account) external;\n\n  /**\n   * @notice Makes an address eligible for dividends\n   */\n  function includeFromDividends(address account) external;\n\n  /**\n   * @notice Returns the last processed index in the `tokenHoldersMap` iterable mapping\n   * @return uint256 last processed index\n   */\n  function getLastProcessedIndex() external view returns (uint256);\n\n  /**\n   * @notice Returns the total number of dividend token holders\n   * @return uint256 length of `tokenHoldersMap` iterable mapping\n   */\n  function getNumberOfTokenHolders() external view returns (uint256);\n\n  /**\n   * @notice Returns all available info about the dividend status of an account\n   * @dev Uses the functions from the `IterableMapping.sol` library\n   */\n  function getAccount(\n    address _account\n  )\n    external\n    view\n    returns (\n      address account,\n      int256 index,\n      int256 iterationsUntilProcessed,\n      uint256 withdrawableDividends,\n      uint256 totalDividends\n    );\n\n  /**\n   * @notice Returns all available info about the dividend status of an account using its index\n   * @dev Uses the functions from the `IterableMapping.sol` library\n   */\n  function getAccountAtIndex(\n    uint256 index\n  ) external view returns (address, int256, int256, uint256, uint256);\n\n  /**\n   * @notice Sets the dividend balance of an account and processes its dividends\n   * @dev Calls the `processAccount` function\n   */\n  function setBalance(address account, uint256 newBalance) external;\n\n  /**\n   * @notice Processes dividends for all token holders\n   * @param gas Amount of gas to use for the transaction\n   */\n  function process(\n    uint256 gas,\n    bool reinvesting\n  ) external returns (uint256, uint256, uint256);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @notice Returns the total amount of dividends distributed by the contract\n   *\n   */\n  function getTotalDividendsDistributed() external view returns (uint256);\n\n  /**\n   * @notice View the amount of dividend in wei that an address can withdraw.\n   * @param _owner The address of a token holder.\n   * @return The amount of dividend in wei that `_owner` can withdraw.\n   */\n  function withdrawableDividendOf(\n    address _owner\n  ) external view returns (uint256);\n\n  function swapFees() external;\n}\n"
    },
    "contracts/IPrismaToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IPrismaToken {\n  function compoundPrisma(address _staker, uint256 _prismaToCompound) external;\n\n  function getMultisig() external view returns (address);\n\n  function getTreasuryReceiver() external view returns (address);\n\n  function getBurnReceiver() external view returns (address);\n\n  function getStakedPrisma(address _user) external view returns (uint256);\n\n  function getTotalStakedAmount() external view returns (uint256);\n\n  function getSellLiquidityFee() external view returns (uint256);\n\n  function getSellTreasuryFee() external view returns (uint256);\n\n  function getSellBurnFee() external view returns (uint256);\n\n  function getTotalSellFees() external view returns (uint256);\n}\n"
    },
    "contracts/IterableMapping.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary IterableMapping {\n  // Iterable mapping from address to uint;\n  struct Map {\n    address[] keys;\n    mapping(address => uint256) values;\n    mapping(address => uint256) indexOf;\n    mapping(address => bool) inserted;\n  }\n\n  function get(Map storage map, address key) internal view returns (uint256) {\n    return map.values[key];\n  }\n\n  function getIndexOfKey(\n    Map storage map,\n    address key\n  ) internal view returns (int256) {\n    if (!map.inserted[key]) {\n      return -1;\n    }\n    return int256(map.indexOf[key]);\n  }\n\n  function getKeyAtIndex(\n    Map storage map,\n    uint256 index\n  ) internal view returns (address) {\n    return map.keys[index];\n  }\n\n  function size(Map storage map) internal view returns (uint256) {\n    return map.keys.length;\n  }\n\n  function set(Map storage map, address key, uint256 val) internal {\n    if (map.inserted[key]) {\n      map.values[key] = val;\n    } else {\n      map.inserted[key] = true;\n      map.values[key] = val;\n      map.indexOf[key] = map.keys.length;\n      map.keys.push(key);\n    }\n  }\n\n  function remove(Map storage map, address key) internal {\n    if (!map.inserted[key]) {\n      return;\n    }\n\n    delete map.inserted[key];\n    delete map.values[key];\n\n    uint256 index = map.indexOf[key];\n    uint256 lastIndex = map.keys.length - 1;\n    address lastKey = map.keys[lastIndex];\n\n    map.indexOf[lastKey] = index;\n    delete map.indexOf[key];\n\n    map.keys[index] = lastKey;\n    map.keys.pop();\n  }\n}\n"
    },
    "contracts/PrismaAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract PrismaAdmin is Ownable {\n  /**\n   * @dev Returns the current implementation of `proxy`.\n   *\n   * Requirements:\n   *\n   * - This contract must be the admin of `proxy`.\n   */\n  function getProxyImplementation(\n    TransparentUpgradeableProxy proxy\n  ) public view virtual returns (address) {\n    // We need to manually run the static call since the getter cannot be flagged as view\n    // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n    (bool success, bytes memory returndata) = address(proxy).staticcall(\n      hex\"5c60da1b\"\n    );\n    require(success);\n    return abi.decode(returndata, (address));\n  }\n\n  /**\n   * @dev Returns the current admin of `proxy`.\n   *\n   * Requirements:\n   *\n   * - This contract must be the admin of `proxy`.\n   */\n  function getProxyAdmin(\n    TransparentUpgradeableProxy proxy\n  ) public view virtual returns (address) {\n    // We need to manually run the static call since the getter cannot be flagged as view\n    // bytes4(keccak256(\"admin()\")) == 0xf851a440\n    (bool success, bytes memory returndata) = address(proxy).staticcall(\n      hex\"f851a440\"\n    );\n    require(success);\n    return abi.decode(returndata, (address));\n  }\n\n  /**\n   * @dev Changes the admin of `proxy` to `newAdmin`.\n   *\n   * Requirements:\n   *\n   * - This contract must be the current admin of `proxy`.\n   */\n  function changeProxyAdmin(\n    TransparentUpgradeableProxy proxy,\n    address newAdmin\n  ) public virtual onlyOwner {\n    proxy.changeAdmin(newAdmin);\n  }\n\n  /**\n   * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n   *\n   * Requirements:\n   *\n   * - This contract must be the admin of `proxy`.\n   */\n  function upgrade(\n    TransparentUpgradeableProxy proxy,\n    address implementation\n  ) public virtual onlyOwner {\n    proxy.upgradeTo(implementation);\n  }\n\n  /**\n   * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n   * {TransparentUpgradeableProxy-upgradeToAndCall}.\n   *\n   * Requirements:\n   *\n   * - This contract must be the admin of `proxy`.\n   */\n  function upgradeAndCall(\n    TransparentUpgradeableProxy proxy,\n    address implementation,\n    bytes memory data\n  ) public payable virtual onlyOwner {\n    proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n  }\n}\n"
    },
    "contracts/PrismaCharity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ncontract PrismaCharity is Ownable {\n  address private prismaProxy = address(0x0); // placeholder\n\n  function retrieveERC20(\n    address token,\n    address dst,\n    uint256 amount\n  ) external onlyOwner {\n    uint256 balance = IERC20(token).balanceOf(address(this));\n    if (token == prismaProxy) {\n      require(balance - amount > (2_000_000 * (10 ** 18)));\n    }\n    IERC20(token).transfer(dst, amount);\n  }\n\n  function retrieveBNB(address dst) external onlyOwner returns (bool success) {\n    uint256 balance = address(this).balance;\n    (success, ) = payable(address(dst)).call{value: balance}(\"\");\n    require(success, \"Could not retrieve\");\n  }\n}\n"
    },
    "contracts/PrismaDividendTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"./IPrismaDividendTracker.sol\";\nimport \"./IterableMapping.sol\";\nimport \"./IPrismaToken.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\n\ncontract PrismaDividendTracker is\n  IPrismaDividendTracker,\n  ERC20Upgradeable,\n  OwnableUpgradeable\n{\n  using IterableMapping for IterableMapping.Map;\n\n  IterableMapping.Map private _tokenHoldersMap;\n\n  ///////////////\n  // VARIABLES //\n  ///////////////\n\n  /**\n   * @dev With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\n   */\n  uint256 private constant _magnitude = 2 ** 128;\n\n  uint256 private _magnifiedPrismaPerShare;\n  uint256 private _magnifiedDividendPerShare;\n  uint256 private _lastProcessedIndex;\n  uint256 private _minimumTokenBalanceForDividends;\n  uint256 private _gasForProcessing = 10_000_000;\n  uint256 private _totalDividendsDistributed;\n  bool private _processingAutoReinvest;\n\n  /**\n   * @dev About dividendCorrection:\n   * If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\n   *   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\n   * When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\n   *   `dividendOf(_user)` should not be changed,\n   *   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\n   * To keep the `dividendOf(_user)` unchanged, we add a correction term:\n   *   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\n   *   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\n   *   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\n   * So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\n   */\n  mapping(address => int256) private _magnifiedDividendCorrections;\n  mapping(address => uint256) private _withdrawnDividends;\n  mapping(address => bool) private _excludedFromDividends;\n\n  IPrismaToken private _prisma;\n  IUniswapV2Router02 private _router;\n  address private _pair;\n  address private _dividendToken;\n\n  ////////////\n  // Events //\n  ////////////\n\n  event DividendsDistributed(address indexed from, uint256 weiAmount);\n  event DividendWithdrawn(address indexed to, uint256 weiAmount);\n  event ExcludeFromDividends(address indexed account);\n  event DividendReinvested(address indexed to, uint256 weiAmount);\n  event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n  event Claim(address indexed account, uint256 amount, bool indexed automatic);\n  event Reinvested(\n    address indexed account,\n    uint256 amount,\n    uint256 received,\n    bool indexed automatic\n  );\n  event GasForProcessing_Updated(\n    uint256 indexed newValue,\n    uint256 indexed oldValue\n  );\n\n  /////////////////\n  // INITIALIZER //\n  /////////////////\n\n  /**\n   * @notice Creates an ERC20 token that will be used to track dividends\n   * @dev Sets minimum wait between dividend claims and minimum balance to be eligible\n   */\n  function init(\n    address dividendToken_,\n    address router_,\n    address prisma_\n  ) public initializer {\n    __Ownable_init();\n    __ERC20_init(\"Prisma Tracker\", \"PRISMA_TRACKER\");\n    _dividendToken = dividendToken_;\n    _prisma = IPrismaToken(prisma_);\n    _router = IUniswapV2Router02(router_);\n    _pair = IUniswapV2Factory(_router.factory()).createPair(\n      prisma_,\n      _dividendToken\n    );\n\n    _minimumTokenBalanceForDividends = 1000 * (10 ** 18);\n  }\n\n  ///////////\n  // ERC20 //\n  ///////////\n\n  function balanceOf(\n    address account\n  )\n    public\n    view\n    override(ERC20Upgradeable, IPrismaDividendTracker)\n    returns (uint256)\n  {\n    return super.balanceOf(account);\n  }\n\n  /**\n   * @dev Internal function that transfer tokens from one address to another.\n   * Update magnifiedDividendCorrections to keep dividends unchanged.\n   * @param from The address to transfer from.\n   * @param to The address to transfer to.\n   * @param value The amount to be transferred.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 value\n  ) internal virtual override {\n    require(false); // currently disabled\n    super._transfer(from, to, value);\n\n    int256 _magCorrection = int(_magnifiedDividendPerShare * value);\n    _magnifiedDividendCorrections[from] =\n      _magnifiedDividendCorrections[from] +\n      _magCorrection;\n    _magnifiedDividendCorrections[to] =\n      _magnifiedDividendCorrections[to] -\n      _magCorrection;\n  }\n\n  /**\n   * @dev Internal function that mints tokens to an account.\n   * Update magnifiedDividendCorrections to keep dividends unchanged.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal override {\n    super._mint(account, value);\n\n    _magnifiedDividendCorrections[account] =\n      _magnifiedDividendCorrections[account] -\n      int(_magnifiedDividendPerShare * value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given account.\n   * Update magnifiedDividendCorrections to keep dividends unchanged.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal override {\n    super._burn(account, value);\n\n    _magnifiedDividendCorrections[account] =\n      _magnifiedDividendCorrections[account] +\n      int(_magnifiedDividendPerShare * value);\n  }\n\n  /**\n   * @dev Since Uniswap does not allow setting the recipient of a swap as one of the tokens\n   * being swapped, it is impossible to collect the swapped fees directly in the main contract.\n   */\n\n  function swapFees() external onlyOwner {\n    uint256 balanceBefore = ERC20Upgradeable(_dividendToken).balanceOf(\n      address(this)\n    );\n\n    uint256 balance = ERC20Upgradeable(address(_prisma)).balanceOf(\n      address(this)\n    );\n    uint256 liquidityFee = (_prisma.getSellLiquidityFee() * balance) / 100;\n    uint256 burnFee = (_prisma.getSellBurnFee() * balance) / 100;\n    uint256 swapAmount = balance - liquidityFee - burnFee;\n\n    ERC20Upgradeable(address(_prisma)).approve(address(_router), swapAmount);\n    address[] memory path = new address[](2);\n    path[0] = address(_prisma);\n    path[1] = _dividendToken;\n    _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n      swapAmount,\n      0,\n      path,\n      address(this),\n      block.timestamp\n    );\n    uint256 balanceAfter = ERC20Upgradeable(_dividendToken).balanceOf(\n      address(this)\n    );\n    uint256 collectedFees = balanceAfter - balanceBefore;\n\n    if (burnFee > 0) {\n      super._transfer(address(this), address(0x0), burnFee);\n    }\n\n    uint256 liquidityBNB = (collectedFees * (_prisma.getSellLiquidityFee())) /\n      (_prisma.getTotalSellFees());\n    if (liquidityBNB > 5) {\n      ERC20Upgradeable(address(_prisma)).approve(\n        address(_router),\n        liquidityFee\n      );\n      ERC20Upgradeable(address(_dividendToken)).approve(\n        address(_router),\n        liquidityBNB\n      );\n      (, uint256 amountB, ) = _router.addLiquidity(\n        address(_prisma),\n        _dividendToken,\n        liquidityFee,\n        liquidityBNB,\n        0,\n        0,\n        msg.sender,\n        block.timestamp\n      );\n      collectedFees -= amountB;\n    }\n\n    if (burnFee > 0) {\n      uint256 burnBNB = (collectedFees * (_prisma.getSellBurnFee())) /\n        (_prisma.getTotalSellFees());\n      ERC20Upgradeable(_dividendToken).transfer(\n        _prisma.getBurnReceiver(),\n        burnBNB\n      );\n      // (bool success_, ) = address(burnReceiver).call{value: burnBNB}(\"\");\n      // if (success_) {\n      //   emit BurnFeeCollected(burnBNB);\n      // }\n      collectedFees -= burnBNB;\n    }\n\n    // uint256 treasuryBNB = (collectedFees * (_prisma.getSellTreasuryFee())) /\n    //   (_prisma.getTotalSellFees());\n    uint256 treasuryBNB = collectedFees;\n    ERC20Upgradeable(_dividendToken).transfer(\n      _prisma.getTreasuryReceiver(),\n      treasuryBNB\n    );\n    // (bool _success, ) = address(treasuryReceiver).call{value: treasuryBNB}(\"\");\n    // if (_success) {\n    //   emit TreasuryFeeCollected(treasuryBNB);\n    // }\n  }\n\n  ////////////////////////////\n  // Dividends Distribution //\n  ////////////////////////////\n\n  /**\n   * @notice Updates the holders struct\n   */\n  function setBalance(address account, uint256 newBalance) external onlyOwner {\n    if (_excludedFromDividends[account]) {\n      return;\n    }\n\n    if (newBalance >= _minimumTokenBalanceForDividends) {\n      _setBalance(account, newBalance);\n      _tokenHoldersMap.set(account, newBalance);\n    } else {\n      _setBalance(account, 0);\n      _tokenHoldersMap.remove(account);\n    }\n  }\n\n  /**\n   * @notice Sets the balance of a user and adjusts supply accordingly\n   */\n  function _setBalance(address account, uint256 newBalance) internal {\n    uint256 currentBalance = balanceOf(account);\n\n    if (newBalance > currentBalance) {\n      uint256 mintAmount = newBalance - currentBalance;\n      _mint(account, mintAmount);\n    } else if (newBalance < currentBalance) {\n      uint256 burnAmount = currentBalance - newBalance;\n      _burn(account, burnAmount);\n    }\n  }\n\n  /**\n   * @notice Distributes ether to token holders as dividends.\n   * @dev It reverts if the total supply of tokens is 0.\n   * It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\n   * About undistributed ether:\n   *   In each distribution, there is a small amount of ether not distributed,\n   *     the magnified amount of which is\n   *     `(msg.value * magnitude) % totalSupply()`.\n   *   With a well-chosen `magnitude`, the amount of undistributed ether\n   *     (de-magnified) in a distribution can be less than 1 wei.\n   *   We can actually keep track of the undistributed ether in a distribution\n   *     and try to distribute it in the next distribution,\n   *     but keeping track of such data on-chain costs much more than\n   *     the saved ether, so we don't do that.\n   * !!! onlyOwner modifier temporarily removed - to check whether it is needed !!!\n   */\n  function distributeDividends(bool processDividends) external {\n    // require(msg.sender == _prisma.getMultisig(), \"Not multisig\");\n    require(totalSupply() > 0);\n\n    uint256 amount = ERC20Upgradeable(_dividendToken).balanceOf(address(this));\n    if (amount > 0) {\n      _magnifiedDividendPerShare =\n        _magnifiedDividendPerShare +\n        (amount * _magnitude) /\n        totalSupply();\n\n      emit DividendsDistributed(msg.sender, amount);\n\n      _totalDividendsDistributed = _totalDividendsDistributed + amount;\n\n      if (processDividends) {\n        process(_gasForProcessing, false);\n        autoReinvest();\n      }\n    }\n  }\n\n  //////////////////////////\n  // Dividends Withdrawal //\n  //////////////////////////\n\n  /**\n   * @notice Processes dividends for all token holders\n   * @param gas Amount of gas to use for the transaction\n   */\n  function process(\n    uint256 gas,\n    bool reinvesting\n  ) public returns (uint256, uint256, uint256) {\n    uint256 numberOfTokenHolders = _tokenHoldersMap.keys.length;\n\n    if (numberOfTokenHolders == 0) {\n      return (0, 0, _lastProcessedIndex);\n    }\n\n    uint256 lastProcessedIndex = _lastProcessedIndex;\n\n    uint256 gasUsed = 0;\n\n    uint256 gasLeft = gasleft();\n\n    uint256 iterations = 0;\n    uint256 claims = 0;\n\n    while (gasUsed < gas && iterations < numberOfTokenHolders) {\n      lastProcessedIndex++;\n\n      if (lastProcessedIndex >= _tokenHoldersMap.keys.length) {\n        lastProcessedIndex = 0;\n      }\n\n      address account = _tokenHoldersMap.keys[lastProcessedIndex];\n\n      if (reinvesting) {\n        if (processReinvest(account, true)) {\n          claims++;\n        }\n      } else if (processAccount(account, true, 0)) {\n        claims++;\n      }\n\n      iterations++;\n\n      uint256 newGasLeft = gasleft();\n\n      if (gasLeft > newGasLeft) {\n        gasUsed = gasUsed + gasLeft - newGasLeft;\n      }\n\n      gasLeft = newGasLeft;\n    }\n\n    _lastProcessedIndex = lastProcessedIndex;\n\n    return (iterations, claims, _lastProcessedIndex);\n  }\n\n  /**\n   * @notice Processes dividends for an account\n   * @dev Emits a `Claim` event\n   * @return bool success\n   */\n  function processAccount(\n    address account,\n    bool automatic,\n    uint256 amount\n  ) public returns (bool) {\n    uint256 _amount;\n    if (amount == 0) {\n      uint256 _withdrawableDividend = withdrawableDividendOf(account) -\n        (withdrawableDividendOf(account) *\n          ((_prisma.getStakedPrisma(account) * _magnitude) /\n            balanceOf(account))) /\n        _magnitude;\n      _amount = _withdrawDividendOfUser(account, _withdrawableDividend);\n    } else {\n      _amount = _withdrawDividendOfUser(account, amount);\n    }\n\n    if (_amount > 0) {\n      emit Claim(account, _amount, automatic);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * @notice Withdraws the ether distributed to the sender.\n   * @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\n   */\n\n  function _withdrawDividendOfUser(\n    address user,\n    uint256 amount\n  ) internal returns (uint256) {\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\n\n    if (_withdrawableDividend > 0 && amount <= _withdrawableDividend) {\n      _withdrawnDividends[user] += amount;\n\n      bool success = IERC20Upgradeable(_dividendToken).transfer(user, amount);\n\n      if (!success) {\n        _withdrawnDividends[user] = _withdrawnDividends[user] - amount;\n        return 0;\n      }\n\n      emit DividendWithdrawn(user, amount);\n\n      return amount;\n    }\n\n    return 0;\n  }\n\n  /////////////////////////////\n  // Dividends Reinvestmnent //\n  ////////////////////////////\n\n  function autoReinvest() internal {\n    uint256 _totalStakedPrisma = _prisma.getTotalStakedAmount();\n    uint256 _totalUnclaimedDividend = IERC20Upgradeable(_dividendToken)\n      .balanceOf(address(this));\n    if (_totalStakedPrisma > 10 && _totalUnclaimedDividend > 10) {\n      _processingAutoReinvest = true;\n      IERC20Upgradeable(_dividendToken).approve(\n        address(_router),\n        _totalUnclaimedDividend\n      );\n      address[] memory path = new address[](2);\n      path[0] = _dividendToken;\n      path[1] = address(_prisma);\n      _router.swapExactTokensForTokens(\n        _totalUnclaimedDividend,\n        0,\n        path,\n        address(this),\n        block.timestamp\n      );\n\n      uint256 _contractPrismaBalance = ERC20Upgradeable(address(_prisma))\n        .balanceOf(address(this));\n      _magnifiedPrismaPerShare =\n        (_contractPrismaBalance * _magnitude) /\n        _totalStakedPrisma;\n\n      process(10_000_000, true);\n\n      _magnifiedPrismaPerShare = 0;\n\n      _processingAutoReinvest = false;\n\n      // emit DividendsDistributed(msg.sender, _reinvestAmount);\n\n      // totalDividendsDistributed = totalDividendsDistributed + _reinvestAmount;\n    }\n  }\n\n  /**\n   * @dev This function is used when we process auto reinvest in `_withdrawDividendOfUser`\n   * It add the dividend equivalent to transfered prisma in `withdrawnDividends[user]`\n   * It compound the prisma to user prisma balance\n   *\n   */\n  function processReinvest(\n    address _user,\n    bool _automatic\n  ) internal returns (bool) {\n    uint256 _reinvestableDividend = withdrawableDividendOf(_user);\n\n    if (_reinvestableDividend > 0) {\n      _withdrawnDividends[_user] += _reinvestableDividend;\n      uint256 _prismaToCompound = distributeEarnedPrisma(_user);\n      _prisma.compoundPrisma(_user, _prismaToCompound);\n      emit Reinvested(\n        _user,\n        _reinvestableDividend,\n        _prismaToCompound,\n        _automatic\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @notice Allows users to manually reinvest an arbitrary amount of dividends\n   */\n  function manualReinvest(uint256 amount) external {\n    require(\n      !_processingAutoReinvest,\n      \"Not allowed for now, try after sometime!\"\n    );\n    uint256 _withdrawableDividend = withdrawableDividendOf(msg.sender);\n    if (_withdrawableDividend > 0 && amount <= _withdrawableDividend) {\n      uint256 balanceBefore = ERC20Upgradeable(address(_prisma)).balanceOf(\n        address(this)\n      );\n\n      _withdrawnDividends[msg.sender] += amount;\n      IERC20Upgradeable(_dividendToken).approve(address(_router), amount);\n      address[] memory path = new address[](2);\n      path[0] = _dividendToken;\n      path[1] = address(_prisma);\n      _router.swapExactTokensForTokens(\n        amount,\n        0,\n        path,\n        address(this),\n        block.timestamp\n      );\n      uint256 balanceAfter = ERC20Upgradeable(address(_prisma)).balanceOf(\n        address(this)\n      );\n\n      uint256 _userPrisma = balanceAfter - balanceBefore;\n      _prisma.compoundPrisma(msg.sender, _userPrisma);\n    }\n  }\n\n  ////////////////////\n  // Dividends Math //\n  ////////////////////\n\n  /**\n   * @notice View the amount of dividend in wei that an address can withdraw.\n   * @param _owner The address of a token holder.\n   * @return The amount of dividend in wei that `_owner` can withdraw.\n   */\n  function withdrawableDividendOf(\n    address _owner\n  ) public view returns (uint256) {\n    return accumulativeDividendOf(_owner) - _withdrawnDividends[_owner];\n  }\n\n  /**\n   * @notice View the amount of dividend in wei that an address has withdrawn.\n   * @param _owner The address of a token holder.\n   * @return The amount of dividend in wei that `_owner` has withdrawn.\n   */\n  function withdrawnDividendOf(address _owner) public view returns (uint256) {\n    return _withdrawnDividends[_owner];\n  }\n\n  /**\n   * @notice View the amount of dividend in wei that an address has earned in total.\n   * @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n   * = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\n   * @param _owner The address of a token holder.\n   * @return The amount of dividend in wei that `_owner` has earned in total.\n   */\n  function accumulativeDividendOf(\n    address _owner\n  ) public view returns (uint256) {\n    return\n      uint(\n        int(_magnifiedDividendPerShare * balanceOf(_owner)) +\n          _magnifiedDividendCorrections[_owner]\n      ) / _magnitude;\n  }\n\n  function distributeEarnedPrisma(address _user) public view returns (uint256) {\n    uint256 _userStakedPrisma = _prisma.getStakedPrisma(_user);\n    uint256 _prismaDividend = (_magnifiedPrismaPerShare * _userStakedPrisma) /\n      _magnitude;\n    return _prismaDividend;\n  }\n\n  //////////////////////\n  // Setter Functions //\n  //////////////////////\n\n  /**\n   * @notice Updates the minimum balance required to be eligible for dividends\n   */\n  function updateMinimumTokenBalanceForDividends(\n    uint256 _newMinimumBalance\n  ) external onlyOwner {\n    require(\n      _newMinimumBalance != _minimumTokenBalanceForDividends,\n      \"New mimimum balance for dividend cannot be same as current minimum balance\"\n    );\n    _minimumTokenBalanceForDividends = _newMinimumBalance * (10 ** 18);\n  }\n\n  /**\n   * @notice Makes an address ineligible for dividends\n   * @dev Calls `_setBalance` and updates `tokenHoldersMap` iterable mapping\n   */\n  function excludeFromDividends(address account) external onlyOwner {\n    require(\n      !_excludedFromDividends[account],\n      \"address already excluded from dividends\"\n    );\n    _excludedFromDividends[account] = true;\n\n    _setBalance(account, 0);\n    _tokenHoldersMap.remove(account);\n\n    emit ExcludeFromDividends(account);\n  }\n\n  /**\n   * @notice Makes an address eligible for dividends\n   */\n  function includeFromDividends(address account) external onlyOwner {\n    _excludedFromDividends[account] = false;\n  }\n\n  /**\n   * @notice Sets the address for the token used for dividend payout\n   * @dev This should be an ERC20 token\n   */\n  function setDividendTokenAddress(address newToken) external onlyOwner {\n    _dividendToken = newToken;\n  }\n\n  function updateGasForProcessing(uint256 newValue) external onlyOwner {\n    require(\n      newValue != _gasForProcessing,\n      \"Cannot update gasForProcessing to same value\"\n    );\n    _gasForProcessing = newValue;\n    emit GasForProcessing_Updated(newValue, _gasForProcessing);\n  }\n\n  ///////////////////////\n  // Getter Functions //\n  /////////////////////\n\n  /**\n   * @notice Returns the total amount of dividends distributed by the contract\n   *\n   */\n  function getTotalDividendsDistributed() external view returns (uint256) {\n    return _totalDividendsDistributed;\n  }\n\n  /**\n   * @notice Returns the last processed index in the `tokenHoldersMap` iterable mapping\n   * @return uint256 last processed index\n   */\n  function getLastProcessedIndex() external view returns (uint256) {\n    return _lastProcessedIndex;\n  }\n\n  /**\n   * @notice Returns the total number of dividend token holders\n   * @return uint256 length of `tokenHoldersMap` iterable mapping\n   */\n  function getNumberOfTokenHolders() external view returns (uint256) {\n    return _tokenHoldersMap.keys.length;\n  }\n\n  /**\n   * @notice Returns all available info about the dividend status of an account\n   * @dev Uses the functions from the `IterableMapping.sol` library\n   */\n  function getAccount(\n    address _account\n  )\n    public\n    view\n    returns (\n      address account,\n      int256 index,\n      int256 iterationsUntilProcessed,\n      uint256 withdrawableDividends,\n      uint256 totalDividends\n    )\n  {\n    account = _account;\n\n    index = _tokenHoldersMap.getIndexOfKey(account);\n\n    iterationsUntilProcessed = -1;\n\n    if (index >= 0) {\n      if (uint256(index) > _lastProcessedIndex) {\n        iterationsUntilProcessed = index - int256(_lastProcessedIndex);\n      } else {\n        uint256 processesUntilEndOfArray = _tokenHoldersMap.keys.length >\n          _lastProcessedIndex\n          ? _tokenHoldersMap.keys.length - _lastProcessedIndex\n          : 0;\n\n        iterationsUntilProcessed = index + int256(processesUntilEndOfArray);\n      }\n    }\n\n    withdrawableDividends = withdrawableDividendOf(account);\n    totalDividends = accumulativeDividendOf(account);\n  }\n\n  /**\n   * @notice Returns all available info about the dividend status of an account using its index\n   * @dev Uses the functions from the `IterableMapping.sol` library\n   */\n  function getAccountAtIndex(\n    uint256 index\n  ) public view returns (address, int256, int256, uint256, uint256) {\n    if (index >= _tokenHoldersMap.size()) {\n      return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0);\n    }\n\n    address account = _tokenHoldersMap.getKeyAtIndex(index);\n\n    return getAccount(account);\n  }\n\n  function getMinBalanceForDividends() external view returns (uint256) {\n    return _minimumTokenBalanceForDividends;\n  }\n}\n"
    },
    "contracts/PrismaProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract PrismaProxy is ERC1967Proxy {\n  /**\n   * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n   * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n   */\n  constructor(\n    address _logic,\n    address admin_,\n    bytes memory _data\n  ) payable ERC1967Proxy(_logic, _data) {\n    _changeAdmin(admin_);\n  }\n\n  /**\n   * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n   */\n  modifier ifAdmin() {\n    if (msg.sender == _getAdmin()) {\n      _;\n    } else {\n      _fallback();\n    }\n  }\n\n  /**\n   * @dev Returns the current admin.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n   *\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n   * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n   */\n  function admin() external ifAdmin returns (address admin_) {\n    admin_ = _getAdmin();\n  }\n\n  /**\n   * @dev Returns the current implementation.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n   *\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n   * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n   */\n  function implementation() external ifAdmin returns (address implementation_) {\n    implementation_ = _implementation();\n  }\n\n  /**\n   * @dev Changes the admin of the proxy.\n   *\n   * Emits an {AdminChanged} event.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n   */\n  function changeAdmin(address newAdmin) external virtual ifAdmin {\n    _changeAdmin(newAdmin);\n  }\n\n  /**\n   * @dev Upgrade the implementation of the proxy.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n   */\n  function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n  }\n\n  /**\n   * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n   * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n   * proxied contract.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n   */\n  function upgradeToAndCall(\n    address newImplementation,\n    bytes calldata data\n  ) external payable ifAdmin {\n    _upgradeToAndCall(newImplementation, data, true);\n  }\n\n  /**\n   * @dev Returns the current admin.\n   */\n  function _admin() internal view virtual returns (address) {\n    return _getAdmin();\n  }\n\n  /**\n   * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n   */\n  function _beforeFallback() internal virtual override {\n    require(\n      msg.sender != _getAdmin(),\n      \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\"\n    );\n    super._beforeFallback();\n  }\n}\n"
    },
    "contracts/PrismaToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"./IPrismaToken.sol\";\nimport \"./IPrismaDividendTracker.sol\";\n\ncontract PrismaToken is IPrismaToken, ERC20Upgradeable, OwnableUpgradeable {\n  ///////////////\n  // CONSTANTS //\n  ///////////////\n\n  address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\n  address private constant ZERO = 0x0000000000000000000000000000000000000000;\n\n  ///////////////\n  // VARIABLES //\n  ///////////////\n\n  IPrismaDividendTracker private _prismaDividendTracker;\n\n  address private _multisig;\n  address private _liquidityReceiver;\n  address private _treasuryReceiver;\n  address private _burnReceiver;\n  address private _prismaDividendToken;\n\n  mapping(address => uint256) private _balances;\n  mapping(address => mapping(address => uint256)) private _allowances;\n  mapping(address => bool) private _isFeeExempt;\n  mapping(address => bool) private _automatedMarketMakerPairs;\n  mapping(address => uint256) private _stakedPrisma;\n\n  bool private _isInternalTransaction;\n  bool private _stakingEnabled;\n\n  uint256 private _totalSupply;\n  uint256 private _buyLiquidityFee;\n  uint256 private _buyTreasuryFee;\n  uint256 private _buyBurnFee;\n  uint256 private _sellLiquidityFee;\n  uint256 private _sellTreasuryFee;\n  uint256 private _sellBurnFee;\n  uint256 private _totalStakedAmount;\n  uint256 private _minSwapFees = 10_000 * 10 ** 18;\n\n  ////////////\n  // Events //\n  ////////////\n\n  event TreasuryFeeCollected(uint256 amount);\n  event BurnFeeCollected(uint256 amount);\n  event PrismaDividendTracker_Updated(\n    address indexed newAddress,\n    address indexed oldAddress\n  );\n  event PrismaDividendEnabled_Updated(bool enabled);\n\n  /////////////////\n  // INITIALIZER //\n  /////////////////\n\n  /**\n   * @dev Sets the values for {name} and {symbol}.\n   * All two of these values are immutable: they can only be set once during\n   * construction.\n   */\n  function init(\n    address prismaDividendToken_,\n    address tracker_\n  ) public initializer {\n    __Ownable_init();\n    __ERC20_init(\"Prisma Finance\", \"PRISMA\");\n\n    _liquidityReceiver = 0x90F79bf6EB2c4f870365E785982E1f101E93b906; // development wallet\n    _treasuryReceiver = 0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65; // development wallet\n    _multisig = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC; // development wallet\n    _totalSupply = 100_000_000 * (10 ** 18);\n    _buyLiquidityFee = 2;\n    _buyTreasuryFee = 2;\n    _sellLiquidityFee = 2;\n    _sellTreasuryFee = 2;\n    _stakingEnabled = true;\n\n    _prismaDividendToken = prismaDividendToken_;\n    _prismaDividendTracker = IPrismaDividendTracker(tracker_);\n\n    _balances[msg.sender] = _totalSupply;\n\n    _isFeeExempt[_multisig] = true;\n    _isFeeExempt[tracker_] = true;\n  }\n\n  ///////////\n  // ERC20 //\n  ///////////\n\n  /**\n   * @notice Returns the total number of tokens in existance.\n   * @return uint256 token total supply\n   */\n  function totalSupply() public view virtual override returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @notice Returns the balance of a user.\n   * @return uint256 account balance\n   */\n  function balanceOf(\n    address account\n  ) public view virtual override returns (uint256) {\n    return _balances[account];\n  }\n\n  /**\n   * @notice Transfers tokens from the caller to another user.\n   * Requirements:\n   * - to cannot be the zero address.\n   * - the caller must have a balance of at least `amount`.\n   * @return bool transfer success\n   */\n  function transfer(\n    address to,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address owner = _msgSender();\n    _transferFrom(owner, to, amount);\n    return true;\n  }\n\n  /**\n   * @notice Returns how much a user can spend using a certain address.\n   * @return uint256 amount allowed\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) public view virtual override returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  /**\n   * @notice Approves an address to spend a certain amount of tokens.\n   * Requirements:\n   * - `spender` cannot be the zero address.\n   * @dev If `amount` is the maximum `uint256`, the allowance is not updated on\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\n   * @return bool success\n   */\n  function approve(\n    address spender,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address owner = _msgSender();\n    require(owner != address(0), \"ERC20: approve from the zero address\");\n    require(spender != address(0), \"ERC20: approve to the zero address\");\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n    return true;\n  }\n\n  /**\n   * @notice Transfers tokens from one address to another.\n   * Requirements:\n   * - `from` and `to` cannot be the zero address.\n   * - `from` must have a balance of at least `amount`.\n   * - the caller must have allowance for ``from``'s tokens of at least\n   * `amount`.\n   * @dev Emits an {Approval} event indicating the updated allowance. This is not\n   * required by the EIP. See the note at the beginning of {ERC20}.\n   * Does not update the allowance if the current allowance is the maximum `uint256`.\n   * @return bool success\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address spender = _msgSender();\n    _spendAllowance(from, spender, amount);\n    _transferFrom(from, to, amount);\n    return true;\n  }\n\n  /**\n   * @dev Moves `amount` of tokens from `from` to `to`.\n   *\n   * This internal function is equivalent to {transfer}, and can be used to\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\n   *\n   * Emits a {Transfer} event.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `from` must have a balance of at least `amount`.\n   */\n  function _transferFrom(address from, address to, uint256 amount) internal {\n    require(from != address(0), \"ERC20: transfer from the zero address\");\n    require(to != address(0), \"ERC20: transfer to the zero address\");\n\n    uint256 fromBalance = _balances[from];\n\n    bool overMinSwapFees = balanceOf(address(_prismaDividendTracker)) >=\n      _minSwapFees;\n\n    uint256 fee;\n\n    if (!_isInternalTransaction) {\n      // Buy order\n      if (_automatedMarketMakerPairs[from] && !_isFeeExempt[to]) {\n        if (getTotalBuyFees() > 0) {\n          fee = (amount * getTotalBuyFees()) / 100;\n          _balances[address(_prismaDividendTracker)] += fee;\n          if (_buyBurnFee > 0) {\n            uint256 buyBurn = (fee * _buyBurnFee) / getTotalBuyFees();\n            _balances[DEAD] += buyBurn;\n          }\n        }\n      }\n      // Sell order\n      else if (_automatedMarketMakerPairs[to]) {\n        if (_stakedPrisma[from] > 0) {\n          uint256 nonStakedAmount = fromBalance - _stakedPrisma[from];\n          require(nonStakedAmount >= amount, \"You need to unstake first\");\n        }\n\n        if (!_isFeeExempt[from]) {\n          if (getTotalSellFees() > 0) {\n            fee = (amount * getTotalSellFees()) / 100;\n            _balances[address(_prismaDividendTracker)] += fee;\n            if (_sellBurnFee > 0) {\n              uint256 sellBurn = (fee * _sellBurnFee) / getTotalSellFees();\n              _balances[DEAD] += sellBurn;\n            }\n            if (overMinSwapFees) {\n              _isInternalTransaction = true;\n              _prismaDividendTracker.swapFees();\n              _isInternalTransaction = false;\n            }\n          }\n        }\n      } else {\n        // Token Transfer\n        if (_stakedPrisma[from] > 0) {\n          uint256 nonStakedAmount = fromBalance - _stakedPrisma[from];\n          require(nonStakedAmount >= amount, \"You need to unstake first\");\n        }\n      }\n    }\n\n    uint256 amountReceived = amount - fee;\n    unchecked {\n      _balances[from] = fromBalance - amount;\n      // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n      // decrementing then incrementing.\n      _balances[to] += amountReceived;\n    }\n\n    try _prismaDividendTracker.setBalance(from, balanceOf(from)) {} catch {}\n    try _prismaDividendTracker.setBalance(to, balanceOf(to)) {} catch {}\n\n    emit Transfer(from, to, amountReceived);\n  }\n\n  //////////////\n  // Staking //\n  ////////////\n\n  /**\n   * @dev Stake given `_amount` of Prisma Token\n   */\n  function stakePrisma(uint256 _amount) external {\n    require(_stakingEnabled, \"Staking is paused\");\n    address _user = msg.sender;\n    require(_balances[_user] >= _amount, \"Not enough tokens to stake\");\n\n    _stakedPrisma[_user] += _amount;\n    _totalStakedAmount += _amount;\n  }\n\n  /**\n   * @dev Unstake given `_amount` of Prisma Token\n   */\n  function unstakePrisma(uint256 _amount) external {\n    require(_stakingEnabled, \"Staking is paused\");\n    address _user = msg.sender;\n    require(_stakedPrisma[_user] >= _amount, \"Not enough tokens to unstake\");\n\n    _stakedPrisma[_user] -= _amount;\n    _totalStakedAmount -= _amount;\n\n    if (_stakedPrisma[_user] == 0) {\n      delete _stakedPrisma[_user];\n    }\n  }\n\n  function compoundPrisma(\n    address _staker,\n    uint256 _prismaToCompound\n  ) external override {\n    require(\n      msg.sender == address(_prismaDividendTracker),\n      \"NOT PRISMA_TRACKER\"\n    );\n    require(_stakingEnabled, \"Staking is paused\");\n    _balances[_staker] += _prismaToCompound;\n    _balances[msg.sender] -= _prismaToCompound;\n    _stakedPrisma[_staker] += _prismaToCompound;\n    _totalStakedAmount += _prismaToCompound;\n\n    try\n      _prismaDividendTracker.setBalance(msg.sender, balanceOf(msg.sender))\n    {} catch {}\n    try\n      _prismaDividendTracker.setBalance(_staker, balanceOf(_staker))\n    {} catch {}\n  }\n\n  //////////////////////\n  // Setter Functions //\n  //////////////////////\n\n  function setBuyLiquidityFee(uint256 newValue) external onlyOwner {\n    _buyLiquidityFee = newValue;\n  }\n\n  function setBuyTreasuryFee(uint256 newValue) external onlyOwner {\n    _buyTreasuryFee = newValue;\n  }\n\n  function setBuyBurnFee(uint256 newValue) external onlyOwner {\n    _buyBurnFee = newValue;\n  }\n\n  function setSellLiquidityFee(uint256 newValue) external onlyOwner {\n    _sellLiquidityFee = newValue;\n  }\n\n  function setSellTreasuryFee(uint256 newValue) external onlyOwner {\n    _sellTreasuryFee = newValue;\n  }\n\n  function setSellBurnFee(uint256 newValue) external onlyOwner {\n    _sellBurnFee = newValue;\n  }\n\n  function setMinSwapFees(uint256 newValue) external onlyOwner {\n    _minSwapFees = newValue;\n  }\n\n  function setAutomatedMarketPair(\n    address _pair,\n    bool _active\n  ) external onlyOwner {\n    _automatedMarketMakerPairs[_pair] = _active;\n  }\n\n  function setPrismaDividendToken(\n    address prismaDividendToken_\n  ) external onlyOwner {\n    _prismaDividendToken = prismaDividendToken_;\n  }\n\n  function updatePrismaDividendTracker(address newAddress) external onlyOwner {\n    require(\n      newAddress != address(_prismaDividendTracker),\n      \"The dividend tracker already has that address\"\n    );\n    IPrismaDividendTracker new_IPrismaDividendTracker = IPrismaDividendTracker(\n      newAddress\n    );\n    new_IPrismaDividendTracker.excludeFromDividends(\n      address(new_IPrismaDividendTracker)\n    );\n    new_IPrismaDividendTracker.excludeFromDividends(address(this));\n    emit PrismaDividendTracker_Updated(\n      newAddress,\n      address(new_IPrismaDividendTracker)\n    );\n    _prismaDividendTracker = new_IPrismaDividendTracker;\n  }\n\n  function excludeFromDividend(address account) external onlyOwner {\n    _prismaDividendTracker.excludeFromDividends(address(account));\n  }\n\n  function updateMinimumBalanceForDividends(\n    uint256 newMinimumBalance\n  ) external onlyOwner {\n    _prismaDividendTracker.updateMinimumTokenBalanceForDividends(\n      newMinimumBalance\n    );\n  }\n\n  function updatePrismaDividendToken(\n    address _newContract,\n    uint256 gas\n  ) external onlyOwner {\n    _prismaDividendTracker.process(gas, false);\n    _prismaDividendToken = _newContract;\n    _prismaDividendTracker.setDividendTokenAddress(_newContract);\n  }\n\n  function setStakingStatus(bool status) external onlyOwner {\n    _stakingEnabled = status;\n  }\n\n  //////////////////////\n  // Getter Functions //\n  //////////////////////\n\n  function getTotalBuyFees() public view returns (uint256) {\n    return _buyLiquidityFee + _buyTreasuryFee + _buyBurnFee;\n  }\n\n  function getTotalSellFees() public view returns (uint256) {\n    return _sellLiquidityFee + _sellTreasuryFee + _sellBurnFee;\n  }\n\n  function getBuyLiquidityFee() external view returns (uint256) {\n    return _buyLiquidityFee;\n  }\n\n  function getBuyTreasuryFee() external view returns (uint256) {\n    return _buyTreasuryFee;\n  }\n\n  function getBuyBurnFee() external view returns (uint256) {\n    return _buyBurnFee;\n  }\n\n  function getSellLiquidityFee() external view returns (uint256) {\n    return _sellLiquidityFee;\n  }\n\n  function getSellTreasuryFee() external view returns (uint256) {\n    return _sellTreasuryFee;\n  }\n\n  function getSellBurnFee() external view returns (uint256) {\n    return _sellBurnFee;\n  }\n\n  function getMultisig() external view returns (address) {\n    return _multisig;\n  }\n\n  function getTreasuryReceiver() external view returns (address) {\n    return _treasuryReceiver;\n  }\n\n  function getBurnReceiver() external view returns (address) {\n    return _burnReceiver;\n  }\n\n  function getPrismaDividendTracker() external view returns (address pair) {\n    return address(_prismaDividendTracker);\n  }\n\n  function getTotalPrismaDividendsDistributed()\n    external\n    view\n    returns (uint256)\n  {\n    return _prismaDividendTracker.getTotalDividendsDistributed();\n  }\n\n  function withdrawablePrismaDividendOf(\n    address account\n  ) external view returns (uint256) {\n    return _prismaDividendTracker.withdrawableDividendOf(account);\n  }\n\n  function prismaDividendTokenBalanceOf(\n    address account\n  ) public view returns (uint256) {\n    return _prismaDividendTracker.balanceOf(account);\n  }\n\n  function getAccountPrismaDividendsInfo(\n    address account\n  ) external view returns (address, int256, int256, uint256, uint256) {\n    return _prismaDividendTracker.getAccount(account);\n  }\n\n  function getAccountPrismaDividendsInfoAtIndex(\n    uint256 index\n  ) external view returns (address, int256, int256, uint256, uint256) {\n    return _prismaDividendTracker.getAccountAtIndex(index);\n  }\n\n  function getLastPrismaDividendProcessedIndex()\n    external\n    view\n    returns (uint256)\n  {\n    return _prismaDividendTracker.getLastProcessedIndex();\n  }\n\n  function getNumberOfPrismaDividendTokenHolders()\n    external\n    view\n    returns (uint256)\n  {\n    return _prismaDividendTracker.getNumberOfTokenHolders();\n  }\n\n  function getStakedPrisma(address _user) external view returns (uint256) {\n    return _stakedPrisma[_user];\n  }\n\n  function getStakingStatus() external view returns (bool) {\n    return _stakingEnabled;\n  }\n\n  function getTotalStakedAmount() external view returns (uint256) {\n    return _totalStakedAmount;\n  }\n}\n"
    },
    "contracts/TokenMocks/MockBUSDToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockBUSDToken is ERC20 {\n  uint256 private _totalSupply = 100_000_000 * (10 ** 18);\n\n  constructor() ERC20(\"MockBUSD Token\", \"MOCK_BUSD\") {\n    _mint(msg.sender, _totalSupply);\n  }\n}\n"
    },
    "contracts/TokenMocks/MockWBNBToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockWBNBToken is ERC20 {\n  uint256 private _totalSupply = 100_000_000 * (10 ** 18);\n\n  constructor() ERC20(\"MockWBNB Token\", \"MOCK_WBNB\") {\n    _mint(msg.sender, _totalSupply);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}